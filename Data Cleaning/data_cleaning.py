# -*- coding: utf-8 -*-
"""Data Cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vl0cxNkESPrLU_V9RHc8732xfNtfiaru
"""

#importing pandas pytohn's data handeling library
import pandas as pd
import warnings
warnings.simplefilter('ignore')

"""# Working with large datasets
* You have learned somewhat about python and pandas on small datasets, but in real scenarios datasetsare huge around lakhs of rows and multiple columns.
* You are now ready to gear up and work with large datasets.
* The data set which we are working with is a <b>Weather dataset of london city of the year 2014</b>
## Happy Learning..
"""

df = pd.read_csv('London_2014.csv')
df.head()

"""# Removing Rouge Spaces
* What are rouge spaces?
 * This are the spaces before or after column names.
 * When you open this dataset in text file, you will notice that columns "Max humidity, Mean humidity", you will notice a space before Mean humidity name.
 * Data frame understands this as df[' Mean humidity'], thus every time you have to add space.
* We will try to remove this rouge space from the dataframe for all the columns.
"""

#let's check the problem
df['Mean Humidity'] 
#This will show a name error as the real value is df[' Mean humidity']

#creating a new dataframe london to store the removed the rouged space
london = pd.read_csv('London_2014.csv', skipinitialspace = True)

#Now let's try the same code.
london['Mean Humidity'] #yaaay! it works.

"""# Removing extra characters
* The column 'WindDirDegress ' has an extra space character in csv beacuse html added an new line just after it while loading the data.
* Checkout how we can remove extra characters.
"""

# Renaming the column in dataframe
london = london.rename(columns={'WindDirDegrees<br />':'WindDirDegrees'})
london.columns

# Getting rid of all the extra spaces after the datav alue of this column.
london['WindDirDegrees'] = london['WindDirDegrees'].str.rstrip('<br />') 
#This will strip out all the spaces from every value in the column.
london['WindDirDegrees'].head()

"""# Dealing with missing values
* Null values of rows are called missing values.
* Once you know how much and where data is missing, you have to decide what to do: ignore those rows? Replace with a fixed value? Replace with a computed value, like the mean?
* what if the column is of Nan(Not a number) datatype, then only first two options are available.
* There are two functions/methods in pandas:
  * dropna(): This will delete all the rows where missing value is present.
  * fillna(): This will fill the missing values with the value passed as an argument.
* It is recommended to use fillna() for Nan and mean technique for number columns.
* pandas ignores the missing values while computing mean() etc.
"""

#Events data column consistes of days when no event is recorded thus the values is Nan.
#We replace all the missing values with empty string.
london['Events'] = london['Events'].fillna('')
london[london['Events'].isnull()] #This will return zero rows as there is no missing data.

"""# Working with Datatypes
* While reading datafrom csv datatype is often misunderstood.
* Therefore checking and converting the datatype of all the columns is necessary before analysis.
* In pandas: 
 * int64: 55 to 2356
 * float64: 55.25 to 2356.00
 * object: pandas datatype for strings.
"""

#Let's View the datatype of all columns
london.dtypes

# now here WindDirDegrees is of object datatype, so if want to view rows with 350 degrees then 
# we need to convert the datatype from object type to int64
london['WindDirDegrees'] =  london['WindDirDegrees'].astype('int64')
london['WindDirDegrees'].dtypes

# Now let's convert GMT from string to Datetime
london['GMT'] = pd.to_datetime(london['GMT'])
london['GMT'].dtypes

#Now let's check
london[london['WindDirDegrees'] > 320]

#now whilw using GMT we need to provide date in datetime64 format.
london[london['GMT'] == pd.datetime(2014, 11, 9)]

#Exercise -1
#Find the Mean temperature on 10-May 2014.
london[london['GMT'] == pd.datetime(2014, 5, 10)]['Mean TemperatureC']

"""# Plotting the charts 
* Plotting makesthe visualization and understanding of data simpler.
* We are going to use pandas's plot function.
* Before using this we need to tell jupyter to display the chart after every call to plot().
"""

london['Max Wind SpeedKm/h'].plot(grid = True, figsize = (15,7))
# The X-axis the dataframe's index from 0 to 364
# The y axis th ewind speed in km/h
# The figsize parameter tells plot to be 10 units long and 7 units high for better visualization.

# Changing the dataframe's index to GMT which would result in better understanding of graph.
london.index = london['GMT']

# now let's see the change on the x-axis
london['Max Wind SpeedKm/h'].plot(grid=True, figsize=(15,8))

# Now let's plot the mean temperature in the month of december.
#use loc for column specific location and not iloc
london.loc[pd.datetime(2014, 12, 1) : pd.datetime(2014, 12, 31)]['Mean TemperatureC'].plot(grid=True, figsize=(7,5))

"""# The Project
* You need to find the best two week for holiday in london.
* Do not forget this steps of loading csv, cleaning data, and then visualizing.
"""